// ...existing code...
/**
 * Script: generate-claude-final.js
 * Description:
 *  - Busca todos los archivos docs/claude_project/claude_project_*.md
 *  - Ordena por versión (v15, v14, ...)
 *  - Toma el contenido de la versión más alta como base
 *  - Añade líneas de versiones inferiores que no existan ya en la base
 *  - Escribe docs/claude_project/claude_project_final.md
 *
 * Uso:
 *  node scripts/generate-claude-final.js
 */
const fs = require('fs');
const path = require('path');

const DIR = path.join(__dirname, '..', 'docs', 'claude_project');
const PATTERN = /^claude_project_v(\d+)\.md$/i;
const OUT_FILE = path.join(DIR, 'claude_project_final.md');

function getVersionFiles() {
  const files = fs.readdirSync(DIR).filter(f => PATTERN.test(f));
  return files.map(f => {
    const m = f.match(PATTERN);
    return { file: path.join(DIR, f), name: f, version: parseInt(m[1], 10) };
  });
}

function mergeFiles() {
  const vf = getVersionFiles();
  if (vf.length === 0) {
    console.error('No se encontraron archivos claude_project_v*.md en', DIR);
    process.exit(1);
  }

  // Orden descendente: versión más alta primero
  vf.sort((a, b) => b.version - a.version);

  // Base: contenido de la versión más alta
  let baseContent = fs.readFileSync(vf[0].file, 'utf8').trim();
  const seen = new Set(
    baseContent
      .split(/\r?\n/)
      .map(l => l.trim())
      .filter(Boolean)
  );

  // Agregar header con metadatos
  const header = [
    `<!-- Generated by scripts/generate-claude-final.js -->`,
    `<!-- Merged files (priority highest -> lowest): ${vf.map(f => f.name).join(', ')} -->`,
    '',
  ].join('\n');

  // Recorre versiones inferiores y añade líneas no duplicadas
  for (let i = 1; i < vf.length; i++) {
    const content = fs.readFileSync(vf[i].file, 'utf8').trim();
    const lines = content.split(/\r?\n/);
    const toAppend = [];
    for (const line of lines) {
      const key = line.trim();
      if (!key) continue;
      if (!seen.has(key)) {
        toAppend.push(line);
        seen.add(key);
      }
    }
    if (toAppend.length > 0) {
      baseContent += '\n\n' + toAppend.join('\n');
    }
  }

  const finalContent = header + '\n' + baseContent + '\n';
  fs.writeFileSync(OUT_FILE, finalContent, 'utf8');
  console.log('Archivo generado:', OUT_FILE);
}

if (require.main === module) {
  mergeFiles();
}
// ...existing code...